public class Stars {
	public static void main(String[] args) {
		/*
		化繁为简
		1 先打印一个举行
			*****
			*****
			*****
			*****
			*****
		2 打印半个金字塔
			*           第一层有一个 *
			* *         第二层有二个 *
			* * *       第三层有三个 *
			* * * *     第四层有四个 *
			* * * * *   第五层有五个 *
		3 打印整个金字塔
				*       第一层有 1 个 *   2 * 1 - 1  有4 = (总层数 - 1) 个空格    (总层数 - 当前层数)
			   ***      第二层有 3 个 *   2 * 2 - 1  有3 = (总层数 - 2) 个空格
			  *****     第三层有 5 个 *   2 * 3 - 1  有2 = (总层数 - 3) 个空格
			 *******    第四层有 7 个 *   2 * 4 - 1  有1 = (总层数 - 4) 个空格
			*********   第五层有 9 个 *   2 * 5 - 1  有0 = (总层数 - 5) 个空格
		
		4 打印空心金字塔[最难的]
				*       第一层有 1 个 *, 当前行的第一个位置是 *, 最后一个位置也是 *
			   * *      第二层有 2 个 *, 当前行的第一个位置是 *, 最后一个位置也是 *
		 	  *   *     第三层有 2 个 *, 当前行的第一个位置是 *, 最后一个位置也是 *
		 	 *     *    第四层有 2 个 *, 当前行的第一个位置是 *, 最后一个位置也是 *
		 	*********   全部输出 *  
		
		先死后活
		5 层数做成变量 int totalLevel = 5

	    */	
		int totalLevel = 20;
		for (int i = 1; i <= totalLevel; i++) {  // i表示层数
			// 在输出 * 之前, 还要输出对应的空格, 对应空格 = 总层数 - 当前层
			for (int k = 1; k <=  totalLevel - i; k++) {
				System.out.print(" ");	
			}
			// 控制每层打印的 * 的个数 	
			for (int j = 1; j <= 2 * i - 1; j++) {
				// 当前行的第一个位置是 *, 最后一个位置也是 *, 最后一层全打 *
				if (j == 1 || j == 2 * i - 1 || i == totalLevel) {
					System.out.print("*");	
				} else {
					System.out.print(" ");
				}
			}
			// 每打印完一层的 * 后, 换行
			System.out.println();			
		}								
	}
}